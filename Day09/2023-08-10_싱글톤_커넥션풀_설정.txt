==> 싱글톤 <==

public class TestDAO {

	// 1) 생성자 외부 접근 불가
	private TestDAO() {
	    // 이후 커넥션 풀을 위한 init 및 ds 내용 작성해야 한다
	}

	// 2) 생성자 대신 객체를 반환할 수 있는 static 메서드
	public static TestDAO getInstance() {
	    if(instance == null) {
		instance = new TestDAO();
	    }
	    return instance;
	}

	// 3) 단 하나의 객체를 저장할 static 필드 instance
	private static TestDAO instance;

}

==> 커넥션풀 <==

	1) DB 접속의 세부정보를 지정하고, 여러개의 커넥션을 관리하는 DataSource 작성
	context.xml
	
	
	<?xml version="1.0" encoding="UTF-8"?>
	<Context>
		<Resource
			name="jdbc/oracle"
			auth="Container"
			type="javax.sql.DataSource"
			driverClassName="oracle.jdbc.driver.OracleDriver"
			url="jdbc:oracle:thin:@192.168.1.100:1521:xe"
			username="c##itbank"
			password="it"
			maxActive="20"
			maxIdle="10"
			maxWait="-1" 
			/>
	</Context>


	2) 프로젝트가 시작될 때 위에서 준비한 객체를 컨테이너에 준비하여 참조할 수 있게 설정
	web.xml

	<?xml version="1.0" encoding="UTF-8"?>
	<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns="http://xmlns.jcp.org/xml/ns/javaee"
		xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
		version="3.1">
		<display-name>day09</display-name>
			
		<resource-ref>
			<description>ConnectionPool</description>
			<res-ref-name>jdbc/oracle</res-ref-name>
			<res-type>javax.sql.DataSource</res-type>
			<res-auth>Container</res-auth>
		</resource-ref>
	</web-app>


	3) DAO에서 객체 컨테이너를 참조할 init와, 커넥션을 관리하는 ds를 작성

	private Context init;
	private DataSource ds;

	private TestDAO() {
		try {
			init = new InitialContext();
			ds = (DataSource) init.lookup("java:comp/env/jdbc/oracle");
			// 자바 컴포넌트 중, 환경 요소중에서 이름이 jdbc/oracle인 요소를 불러온다
		} catch (NamingException e) {
			System.err.println("dataSource 불러오기 실패 : " + e);
		}
	}

















